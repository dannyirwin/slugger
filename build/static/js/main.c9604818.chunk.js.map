{"version":3,"sources":["components/Header.js","components/About.js","config.js","components/Game.js","slugger.js","components/Instructions.js","components/Main.js","App.js","reportWebVitals.js","index.js"],"names":["Header","About","className","config","numOfCells","responsiveSize","gameSize","backgroundColor","fps","Game","ref","useRef","useEffect","canvas","upBtn","downBtn","leftBtn","rightBtn","ctx","getContext","sideLength","findScreenSize","scale","window","innerWidth","innerHeight","resizeCanvas","height","width","drawBackground","fillStyle","fillRect","i","j","cellPosToCanvasPos","positionArray","Math","floor","createSlug","color","x","y","direction","bellyPositions","isDigesting","segmentPositions","update","this","checkCollision","moveSlug","handleDigestion","drawSlug","drawBelly","drawHead","strokeStyle","lineWidth","lineCap","lineJoin","beginPath","forEach","segmentPosition","index","position","moveTo","lineTo","stroke","antennaLen","angle","xTip","cos","yTip","sin","arc","PI","fill","pop","unshift","findNextPosition","firstSegment","newSegment","console","error","nextPosition","nextSegmentPositions","collideWithSelf","some","collideWithEdge","collideWithSnack","snack","isPaused","gameOver","handleEatSnack","push","handleEaten","handleMovementInput","finalSegment","length","shift","createSnack","newSnack","randomizePosition","slugPositions","slug","concat","randomX","random","randomY","drawSnack","message","alert","now","then","delta","fpsInterval","startGame","performance","requestAnimationFrame","init","addEventListener","document","event","key","toLocaleLowerCase","runGame","current","Instructions","setMovementButtons","Main","App","useState","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.c9604818.chunk.js","sourcesContent":["export default function Header() {\n  return (\n    <header>\n      <h1>Slugger!</h1>\n    </header>\n  );\n}\n","export default function About() {\n  return (\n    <section className=\"side\">\n      This project was built as a daily warm up and tutorial series\n    </section>\n  );\n}\n","const config = {\n  numOfCells: 16,\n  responsiveSize: true,\n  gameSize: 60000, //uses this only if not responsive\n  backgroundColor: \"#c3faa2\",\n  fps: 5\n};\n\nexport default config;\n","import { useRef, useEffect } from \"react\";\nimport runGame from \"../slugger\";\n\nexport default function Game() {\n  let ref = useRef();\n\n  useEffect(() => {\n    runGame(ref.current);\n  });\n\n  return <canvas ref={ref}></canvas>;\n}\n","import config from \"./config\";\n\nexport default function runGame(\n  canvas,\n  gameSize = config.gameSize,\n  upBtn,\n  downBtn,\n  leftBtn,\n  rightBtn\n) {\n  const ctx = canvas.getContext(\"2d\");\n  const responsiveSize = config.responsiveSize;\n  const numOfCells = config.numOfCells;\n  const sideLength = responsiveSize ? findScreenSize() : config.gameSize;\n  const scale = sideLength / numOfCells;\n  const backgroundColor = config.backgroundColor;\n\n  function findScreenSize() {\n    const size =\n      window.innerWidth < window.innerHeight\n        ? window.innerWidth\n        : window.innerHeight;\n    return size * 0.9;\n  }\n\n  function resizeCanvas() {\n    canvas.height = sideLength;\n    canvas.width = sideLength;\n  }\n  function drawBackground() {\n    ctx.fillStyle = backgroundColor;\n    ctx.fillRect(0, 0, sideLength, sideLength);\n    ctx.fillStyle = \"rgba(255,255,255, 0.2)\";\n\n    for (let i = 0; i < numOfCells; i += 2) {\n      for (let j = 0; j < numOfCells; j += 2) {\n        ctx.fillRect(i * scale, j * scale, scale, scale);\n        ctx.fillRect((i + 1) * scale, (j + 1) * scale, scale, scale);\n      }\n    }\n  }\n  function cellPosToCanvasPos(positionArray) {\n    const x = Math.floor(positionArray[0] * scale + scale * 0.5);\n    const y = Math.floor(positionArray[1] * scale + scale * 0.5);\n    return [x, y];\n  }\n  function createSlug(\n    color = \"salmon\",\n    x = Math.floor(numOfCells / 2),\n    y = Math.floor(numOfCells / 2)\n  ) {\n    return {\n      color: color,\n      direction: \"north\",\n      bellyPositions: [],\n      isDigesting: false,\n      segmentPositions: [\n        [x, y],\n        [x, y + 1],\n        [x, y + 2]\n      ],\n      update: function () {\n        this.checkCollision();\n        this.moveSlug();\n        this.handleDigestion();\n        this.drawSlug();\n        this.drawBelly();\n        this.drawHead();\n      },\n      drawSlug: function () {\n        ctx.strokeStyle = this.color;\n        ctx.lineWidth = scale * 0.8;\n        ctx.lineCap = \"round\";\n        ctx.lineJoin = \"round\";\n        ctx.beginPath();\n\n        this.segmentPositions.forEach((segmentPosition, index) => {\n          const position = cellPosToCanvasPos(segmentPosition);\n          if (index === 0) {\n            ctx.moveTo(position[0], position[1]);\n          } else {\n            ctx.lineTo(position[0], position[1]);\n          }\n        });\n        ctx.stroke();\n      },\n      drawHead: function () {\n        const position = cellPosToCanvasPos(this.segmentPositions[0]);\n        const x = position[0];\n        const y = position[1];\n        const antennaLen = scale;\n\n        const angle = this.direction === \"south\" ? -2 : 2;\n\n        ctx.beginPath();\n        ctx.lineWidth = scale * 0.1;\n\n        let xTip = antennaLen * Math.cos(angle);\n        let yTip = antennaLen * Math.sin(angle);\n\n        ctx.moveTo(x + xTip, y - yTip);\n        ctx.lineTo(x, y);\n        ctx.lineTo(x - xTip, y - yTip);\n        ctx.stroke();\n      },\n      drawBelly: function () {\n        if (this.isDigesting) {\n          ctx.fillStyle = this.color;\n          this.bellyPositions.forEach(position => {\n            position = cellPosToCanvasPos(position);\n            ctx.beginPath();\n            ctx.arc(position[0], position[1], scale * 0.5, 0, 2 * Math.PI);\n            ctx.fill();\n          });\n        }\n      },\n      moveSlug: function () {\n        this.segmentPositions.pop();\n        this.segmentPositions.unshift(this.findNextPosition());\n      },\n      findNextPosition: function (direction = this.direction) {\n        const firstSegment = this.segmentPositions[0];\n        let newSegment = [];\n        switch (direction) {\n          case \"north\":\n            newSegment[0] = firstSegment[0];\n            newSegment[1] = firstSegment[1] - 1;\n            break;\n          case \"west\":\n            newSegment[0] = firstSegment[0] - 1;\n            newSegment[1] = firstSegment[1];\n            break;\n          case \"south\":\n            newSegment[0] = firstSegment[0];\n            newSegment[1] = firstSegment[1] + 1;\n            break;\n          case \"east\":\n            newSegment[0] = firstSegment[0] + 1;\n            newSegment[1] = firstSegment[1];\n            break;\n          default:\n            console.error(\n              \"ERROR: expected 'north' 'south' 'east' or 'west' but got \" +\n                direction\n            );\n        }\n        return newSegment;\n      },\n      checkCollision: function () {\n        const nextPosition = this.findNextPosition();\n        const nextSegmentPositions = [...this.segmentPositions];\n        nextSegmentPositions.pop();\n        const collideWithSelf = nextSegmentPositions.some(\n          position =>\n            position[0] === nextPosition[0] && position[1] === nextPosition[1]\n        );\n        const collideWithEdge =\n          nextPosition[0] < 0 ||\n          nextPosition[0] > numOfCells - 1 ||\n          nextPosition[1] < 0 ||\n          nextPosition[1] > numOfCells - 1;\n        const collideWithSnack =\n          nextPosition[0] === snack.position[0] &&\n          nextPosition[1] === snack.position[1];\n\n        if (collideWithSelf || collideWithEdge) {\n          isPaused = true;\n          gameOver();\n        } else if (collideWithSnack) {\n          this.handleEatSnack();\n        }\n      },\n      handleEatSnack: function () {\n        this.bellyPositions.push(snack.position);\n        this.isDigesting = true;\n        snack.handleEaten();\n      },\n      handleMovementInput: function (direction) {\n        const nextPosition = this.findNextPosition(direction);\n        const canMoveThere = !this.segmentPositions.some(\n          position =>\n            position[0] === nextPosition[0] && position[1] === nextPosition[1]\n        );\n        if (canMoveThere) {\n          this.direction = direction;\n        }\n      },\n      handleDigestion: function () {\n        if (this.isDigesting) {\n          const tempPositions = [...this.bellyPositions];\n          tempPositions.forEach(position => {\n            const finalSegment =\n              this.segmentPositions[this.segmentPositions.length - 1];\n            if (\n              position[0] === finalSegment[0] &&\n              position[1] === finalSegment[1]\n            ) {\n              this.segmentPositions.push(position);\n              this.bellyPositions.shift();\n              if (this.bellyPositions.length === 0) {\n                this.isDigesting = false;\n              }\n            }\n          });\n        }\n      }\n    };\n  }\n  function createSnack(color = \"#66b8ff\") {\n    const newSnack = {\n      color: color,\n      position: [0, 0],\n      randomizePosition: function () {\n        const slugPositions = [slug.findNextPosition()].concat(\n          slug.segmentPositions\n        );\n        const randomX = Math.floor(Math.random() * numOfCells);\n        const randomY = Math.floor(Math.random() * numOfCells);\n        if (slugPositions.length - 2 === numOfCells ** 2) {\n          gameOver(\"You WIN!\");\n        } else if (\n          slugPositions.some(\n            position => position[0] === randomX && position[1] === randomY\n          )\n        ) {\n          this.randomizePosition();\n        } else {\n          this.position = [randomX, randomY];\n        }\n      },\n      drawSnack: function () {\n        const position = cellPosToCanvasPos(this.position);\n\n        ctx.fillStyle = this.color;\n        ctx.beginPath();\n        ctx.arc(position[0], position[1], scale * 0.3, 0, 2 * Math.PI);\n        ctx.fill();\n      },\n      handleEaten: function () {\n        snack = createSnack();\n      }\n    };\n    newSnack.randomizePosition();\n    return newSnack;\n  }\n  function gameOver(message = \"Game Over\") {\n    isPaused = true;\n    slug = createSlug();\n    snack = createSnack();\n    drawBackground();\n    alert(message);\n  }\n\n  let isPaused = true;\n  const fps = config.fps;\n  const fpsInterval = 1000 / fps;\n  let now, then, delta;\n\n  function startGame(fps) {\n    then = window.performance.now();\n    requestAnimationFrame(update);\n  }\n\n  function update() {\n    now = window.performance.now();\n    delta = now - then;\n\n    if (delta > fpsInterval) {\n      then = now - (delta % fpsInterval);\n      drawBackground();\n      slug.update();\n      snack.drawSnack();\n    }\n    !isPaused && requestAnimationFrame(update);\n  }\n\n  function init() {\n    resizeCanvas();\n    drawBackground();\n    startGame();\n  }\n\n  let slug = createSlug();\n  let snack = createSnack();\n\n  window.addEventListener(\"load\", init);\n\n  document.addEventListener(\"keydown\", event => {\n    const key = event.key.toLocaleLowerCase();\n    switch (key) {\n      case \" \":\n        isPaused && update();\n        break;\n      case \"p\":\n        isPaused = !isPaused;\n        !isPaused && requestAnimationFrame(update);\n        break;\n      case \"w\":\n      case \"arrowup\":\n        slug.handleMovementInput(\"north\");\n        break;\n      case \"s\":\n      case \"arrowdown\":\n        slug.handleMovementInput(\"south\");\n        break;\n      case \"a\":\n      case \"arrowleft\":\n        slug.handleMovementInput(\"west\");\n        break;\n      case \"d\":\n      case \"arrowright\":\n        slug.handleMovementInput(\"east\");\n        break;\n      default:\n        break;\n    }\n  });\n\n  if (upBtn && downBtn && leftBtn && rightBtn) {\n    upBtn.addEventListener(\"click\", () => {\n      slug.handleMovementInput(\"north\");\n    });\n\n    downBtn.addEventListener(\"click\", () => {\n      slug.handleMovementInput(\"south\");\n    });\n\n    leftBtn.addEventListener(\"click\", () => {\n      slug.handleMovementInput(\"west\");\n    });\n\n    rightBtn.addEventListener(\"click\", () => {\n      slug.handleMovementInput(\"east\");\n    });\n  }\n}\n","import MovementButtons from \"./MovementButtons\";\n\nexport default function Instructions({ setMovementButtons }) {\n  /*   const isOnMobile =\n    navigator.userAgent.match(/Android/i) ||\n    navigator.userAgent.match(/webOS/i) ||\n    navigator.userAgent.match(/iPhone/i) ||\n    navigator.userAgent.match(/iPad/i) ||\n    navigator.userAgent.match(/iPod/i) ||\n    navigator.userAgent.match(/BlackBerry/i) ||\n    navigator.userAgent.match(/Windows Phone/i); */\n\n  return (\n    <section className=\"side\">\n      <h2>How To Play</h2>\n      Control the slug and eat as many snacks as possible! Careful not to run\n      into the edge or yourself as you grow.\n      <ul>\n        <li>Use WSAD or your arrow keys to control the slug</li>\n        <li>Begin the game by pressing \"p\"</li>\n      </ul>\n      {\n        //<MovementButtons setMovementButtons={setMovementButtons} />\n      }\n    </section>\n  );\n}\n","import About from \"./About\";\nimport Game from \"./Game\";\nimport Instructions from \"./Instructions\";\n\nexport default function Main({ setMovementButtons }) {\n  return (\n    <main>\n      <Instructions setMovementButtons={setMovementButtons} />\n      <Game />\n      <About />\n    </main>\n  );\n}\n","import \"./App.css\";\nimport Header from \"./components/Header\";\nimport Main from \"./components/Main\";\n\nimport { useState } from \"react\";\n\nfunction App() {\n  const [movementButtons, setMovementButtons] = useState({});\n\n  return (\n    <div className=\"App\">\n      <Header />\n      <Main setMovementButtons={setMovementButtons} />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}