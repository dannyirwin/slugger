{"ast":null,"code":"import config from \"./config\";\nexport default function runGame(canvas, gameSize = config.gameSize) {\n  const ctx = canvas.getContext(\"2d\");\n  const responsiveSize = config.responsiveSize;\n  const numOfCells = config.numOfCells;\n  const sideLength = responsiveSize ? findScreenSize() : config.gameSize;\n  const scale = sideLength / numOfCells;\n  const backgroundColor = config.backgroundColor;\n\n  function findScreenSize() {\n    const size = window.innerWidth < window.innerHeight ? window.innerWidth : window.innerHeight;\n    console.log(window.innerWidth, window.innerHeight, size);\n    return size * 0.9;\n  }\n\n  function resizeCanvas() {\n    canvas.height = sideLength;\n    canvas.width = sideLength;\n  }\n\n  function drawBackground() {\n    ctx.fillStyle = backgroundColor;\n    ctx.fillRect(0, 0, sideLength, sideLength);\n    ctx.fillStyle = \"rgba(255,255,255, 0.2)\";\n\n    for (let i = 0; i < numOfCells; i += 2) {\n      for (let j = 0; j < numOfCells; j += 2) {\n        ctx.fillRect(i * scale, j * scale, scale, scale);\n        ctx.fillRect((i + 1) * scale, (j + 1) * scale, scale, scale);\n      }\n    }\n  }\n\n  function cellPosToCanvasPos(positionArray) {\n    const x = Math.floor(positionArray[0] * scale + scale * 0.5);\n    const y = Math.floor(positionArray[1] * scale + scale * 0.5);\n    return [x, y];\n  }\n\n  function createSlug(color = \"salmon\", x = Math.floor(numOfCells / 2), y = Math.floor(numOfCells / 2)) {\n    return {\n      color: color,\n      direction: \"north\",\n      bellyPositions: [],\n      isDigesting: false,\n      segmentPositions: [[x, y], [x, y + 1], [x, y + 2]],\n      update: function () {\n        this.checkCollision();\n        this.moveSlug();\n        this.handleDigestion();\n        this.drawSlug();\n        this.drawBelly();\n      },\n      drawSlug: function () {\n        const maxLineWidth = scale * 0.8;\n        const minLineWidth = scale * 0.2;\n        const lineWidth = maxLineWidth;\n        ctx.strokeStyle = this.color;\n        ctx.lineWidth = scale * 0.8;\n        ctx.lineCap = \"round\";\n        ctx.lineJoin = \"round\";\n        ctx.beginPath();\n        this.segmentPositions.forEach((segmentPosition, index) => {\n          const position = cellPosToCanvasPos(segmentPosition);\n\n          if (index === 0) {\n            ctx.moveTo(position[0], position[1]);\n          } else {\n            ctx.lineTo(position[0], position[1]);\n            ctx.stroke();\n          }\n        });\n      },\n      drawBelly: function () {\n        if (this.isDigesting) {\n          ctx.fillStyle = this.color;\n          this.bellyPositions.forEach(position => {\n            position = cellPosToCanvasPos(position);\n            ctx.beginPath();\n            ctx.arc(position[0], position[1], scale * 0.5, 0, 2 * Math.PI);\n            ctx.fill();\n          });\n        }\n      },\n      moveSlug: function () {\n        this.segmentPositions.pop();\n        this.segmentPositions.unshift(this.findNextPosition());\n      },\n      findNextPosition: function (direction = this.direction) {\n        const firstSegment = this.segmentPositions[0];\n        let newSegment = [];\n\n        switch (direction) {\n          case \"north\":\n            newSegment[0] = firstSegment[0];\n            newSegment[1] = firstSegment[1] - 1;\n            break;\n\n          case \"west\":\n            newSegment[0] = firstSegment[0] - 1;\n            newSegment[1] = firstSegment[1];\n            break;\n\n          case \"south\":\n            newSegment[0] = firstSegment[0];\n            newSegment[1] = firstSegment[1] + 1;\n            break;\n\n          case \"east\":\n            newSegment[0] = firstSegment[0] + 1;\n            newSegment[1] = firstSegment[1];\n            break;\n\n          default:\n            console.error(\"ERROR: expected 'north' 'south' 'east' or 'west' but got \" + direction);\n        }\n\n        return newSegment;\n      },\n      checkCollision: function () {\n        const nextPosition = this.findNextPosition();\n        const nextSegmentPositions = [...this.segmentPositions];\n        nextSegmentPositions.pop();\n        const collideWithSelf = nextSegmentPositions.some(position => position[0] === nextPosition[0] && position[1] === nextPosition[1]);\n        const collideWithEdge = nextPosition[0] < 0 || nextPosition[0] > numOfCells - 1 || nextPosition[1] < 0 || nextPosition[1] > numOfCells - 1;\n        const collideWithSnack = nextPosition[0] === snack.position[0] && nextPosition[1] === snack.position[1];\n\n        if (collideWithSelf || collideWithEdge) {\n          isPaused = true;\n          gameOver();\n        } else if (collideWithSnack) {\n          this.handleEatSnack();\n        }\n      },\n      handleEatSnack: function () {\n        this.bellyPositions.push(snack.position);\n        this.isDigesting = true;\n        snack.handleEaten();\n      },\n      handleMovementInput: function (direction) {\n        const nextPosition = this.findNextPosition(direction);\n        const canMoveThere = !this.segmentPositions.some(position => position[0] === nextPosition[0] && position[1] === nextPosition[1]);\n\n        if (canMoveThere) {\n          this.direction = direction;\n        }\n      },\n      handleDigestion: function () {\n        if (this.isDigesting) {\n          const tempPositions = [...this.bellyPositions];\n          tempPositions.forEach(position => {\n            const finalSegment = this.segmentPositions[this.segmentPositions.length - 1];\n\n            if (position[0] === finalSegment[0] && position[1] === finalSegment[1]) {\n              this.segmentPositions.push(position);\n              this.bellyPositions.shift();\n\n              if (this.bellyPositions.length === 0) {\n                this.isDigesting = false;\n              }\n            }\n          });\n        }\n      }\n    };\n  }\n\n  function createSnack(color = \"#66b8ff\") {\n    const newSnack = {\n      color: color,\n      position: [0, 0],\n      randomizePosition: function () {\n        const slugPositions = [slug.findNextPosition()].concat(slug.segmentPositions);\n        const randomX = Math.floor(Math.random() * numOfCells);\n        const randomY = Math.floor(Math.random() * numOfCells);\n\n        if (slugPositions.length - 2 === numOfCells ** 2) {\n          gameOver(\"You WIN!\");\n        } else if (slugPositions.some(position => position[0] === randomX && position[1] === randomY)) {\n          this.randomizePosition();\n        } else {\n          this.position = [randomX, randomY];\n        }\n      },\n      drawSnack: function () {\n        const position = cellPosToCanvasPos(this.position);\n        ctx.fillStyle = this.color;\n        ctx.beginPath();\n        ctx.arc(position[0], position[1], scale * 0.3, 0, 2 * Math.PI);\n        ctx.fill();\n      },\n      handleEaten: function () {\n        snack = createSnack();\n      }\n    };\n    newSnack.randomizePosition();\n    return newSnack;\n  }\n\n  function gameOver(message = \"Game Over\") {\n    isPaused = true;\n    slug = createSlug();\n    snack = createSnack();\n    drawBackground();\n    alert(message);\n  }\n\n  let isPaused = true;\n  const fps = config.fps;\n  const fpsInterval = 1000 / fps;\n  let now, then, delta;\n\n  function startGame(fps) {\n    then = window.performance.now();\n    requestAnimationFrame(update);\n  }\n\n  function update() {\n    now = window.performance.now();\n    delta = now - then;\n\n    if (delta > fpsInterval) {\n      then = now - delta % fpsInterval;\n      drawBackground();\n      slug.update();\n      snack.drawSnack();\n    }\n\n    !isPaused && requestAnimationFrame(update);\n  }\n\n  function init() {\n    resizeCanvas();\n    drawBackground();\n    startGame();\n  }\n\n  let slug = createSlug();\n  let snack = createSnack();\n  window.addEventListener(\"load\", init);\n  document.addEventListener(\"keydown\", event => {\n    const key = event.key.toLocaleLowerCase();\n\n    switch (key) {\n      case \" \":\n        isPaused && update();\n        break;\n\n      case \"p\":\n        isPaused = !isPaused;\n        !isPaused && requestAnimationFrame(update);\n        break;\n\n      case \"w\":\n      case \"arrowup\":\n        slug.handleMovementInput(\"north\");\n        break;\n\n      case \"s\":\n      case \"arrowdown\":\n        slug.handleMovementInput(\"south\");\n        break;\n\n      case \"a\":\n      case \"arrowleft\":\n        slug.handleMovementInput(\"west\");\n        break;\n\n      case \"d\":\n      case \"arrowright\":\n        slug.handleMovementInput(\"east\");\n        break;\n\n      default:\n        break;\n    }\n  });\n}","map":{"version":3,"sources":["/Users/dirwin/Development/slugger/src/slugger.js"],"names":["config","runGame","canvas","gameSize","ctx","getContext","responsiveSize","numOfCells","sideLength","findScreenSize","scale","backgroundColor","size","window","innerWidth","innerHeight","console","log","resizeCanvas","height","width","drawBackground","fillStyle","fillRect","i","j","cellPosToCanvasPos","positionArray","x","Math","floor","y","createSlug","color","direction","bellyPositions","isDigesting","segmentPositions","update","checkCollision","moveSlug","handleDigestion","drawSlug","drawBelly","maxLineWidth","minLineWidth","lineWidth","strokeStyle","lineCap","lineJoin","beginPath","forEach","segmentPosition","index","position","moveTo","lineTo","stroke","arc","PI","fill","pop","unshift","findNextPosition","firstSegment","newSegment","error","nextPosition","nextSegmentPositions","collideWithSelf","some","collideWithEdge","collideWithSnack","snack","isPaused","gameOver","handleEatSnack","push","handleEaten","handleMovementInput","canMoveThere","tempPositions","finalSegment","length","shift","createSnack","newSnack","randomizePosition","slugPositions","slug","concat","randomX","random","randomY","drawSnack","message","alert","fps","fpsInterval","now","then","delta","startGame","performance","requestAnimationFrame","init","addEventListener","document","event","key","toLocaleLowerCase"],"mappings":"AAAA,OAAOA,MAAP,MAAmB,UAAnB;AAEA,eAAe,SAASC,OAAT,CAAiBC,MAAjB,EAAyBC,QAAQ,GAAGH,MAAM,CAACG,QAA3C,EAAqD;AAClE,QAAMC,GAAG,GAAGF,MAAM,CAACG,UAAP,CAAkB,IAAlB,CAAZ;AACA,QAAMC,cAAc,GAAGN,MAAM,CAACM,cAA9B;AACA,QAAMC,UAAU,GAAGP,MAAM,CAACO,UAA1B;AACA,QAAMC,UAAU,GAAGF,cAAc,GAAGG,cAAc,EAAjB,GAAsBT,MAAM,CAACG,QAA9D;AACA,QAAMO,KAAK,GAAGF,UAAU,GAAGD,UAA3B;AACA,QAAMI,eAAe,GAAGX,MAAM,CAACW,eAA/B;;AAEA,WAASF,cAAT,GAA0B;AACxB,UAAMG,IAAI,GACRC,MAAM,CAACC,UAAP,GAAoBD,MAAM,CAACE,WAA3B,GACIF,MAAM,CAACC,UADX,GAEID,MAAM,CAACE,WAHb;AAIAC,IAAAA,OAAO,CAACC,GAAR,CAAYJ,MAAM,CAACC,UAAnB,EAA+BD,MAAM,CAACE,WAAtC,EAAmDH,IAAnD;AACA,WAAOA,IAAI,GAAG,GAAd;AACD;;AAED,WAASM,YAAT,GAAwB;AACtBhB,IAAAA,MAAM,CAACiB,MAAP,GAAgBX,UAAhB;AACAN,IAAAA,MAAM,CAACkB,KAAP,GAAeZ,UAAf;AACD;;AACD,WAASa,cAAT,GAA0B;AACxBjB,IAAAA,GAAG,CAACkB,SAAJ,GAAgBX,eAAhB;AACAP,IAAAA,GAAG,CAACmB,QAAJ,CAAa,CAAb,EAAgB,CAAhB,EAAmBf,UAAnB,EAA+BA,UAA/B;AACAJ,IAAAA,GAAG,CAACkB,SAAJ,GAAgB,wBAAhB;;AAEA,SAAK,IAAIE,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGjB,UAApB,EAAgCiB,CAAC,IAAI,CAArC,EAAwC;AACtC,WAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGlB,UAApB,EAAgCkB,CAAC,IAAI,CAArC,EAAwC;AACtCrB,QAAAA,GAAG,CAACmB,QAAJ,CAAaC,CAAC,GAAGd,KAAjB,EAAwBe,CAAC,GAAGf,KAA5B,EAAmCA,KAAnC,EAA0CA,KAA1C;AACAN,QAAAA,GAAG,CAACmB,QAAJ,CAAa,CAACC,CAAC,GAAG,CAAL,IAAUd,KAAvB,EAA8B,CAACe,CAAC,GAAG,CAAL,IAAUf,KAAxC,EAA+CA,KAA/C,EAAsDA,KAAtD;AACD;AACF;AACF;;AACD,WAASgB,kBAAT,CAA4BC,aAA5B,EAA2C;AACzC,UAAMC,CAAC,GAAGC,IAAI,CAACC,KAAL,CAAWH,aAAa,CAAC,CAAD,CAAb,GAAmBjB,KAAnB,GAA2BA,KAAK,GAAG,GAA9C,CAAV;AACA,UAAMqB,CAAC,GAAGF,IAAI,CAACC,KAAL,CAAWH,aAAa,CAAC,CAAD,CAAb,GAAmBjB,KAAnB,GAA2BA,KAAK,GAAG,GAA9C,CAAV;AACA,WAAO,CAACkB,CAAD,EAAIG,CAAJ,CAAP;AACD;;AACD,WAASC,UAAT,CACEC,KAAK,GAAG,QADV,EAEEL,CAAC,GAAGC,IAAI,CAACC,KAAL,CAAWvB,UAAU,GAAG,CAAxB,CAFN,EAGEwB,CAAC,GAAGF,IAAI,CAACC,KAAL,CAAWvB,UAAU,GAAG,CAAxB,CAHN,EAIE;AACA,WAAO;AACL0B,MAAAA,KAAK,EAAEA,KADF;AAELC,MAAAA,SAAS,EAAE,OAFN;AAGLC,MAAAA,cAAc,EAAE,EAHX;AAILC,MAAAA,WAAW,EAAE,KAJR;AAKLC,MAAAA,gBAAgB,EAAE,CAChB,CAACT,CAAD,EAAIG,CAAJ,CADgB,EAEhB,CAACH,CAAD,EAAIG,CAAC,GAAG,CAAR,CAFgB,EAGhB,CAACH,CAAD,EAAIG,CAAC,GAAG,CAAR,CAHgB,CALb;AAULO,MAAAA,MAAM,EAAE,YAAY;AAClB,aAAKC,cAAL;AACA,aAAKC,QAAL;AACA,aAAKC,eAAL;AACA,aAAKC,QAAL;AACA,aAAKC,SAAL;AACD,OAhBI;AAiBLD,MAAAA,QAAQ,EAAE,YAAY;AACpB,cAAME,YAAY,GAAGlC,KAAK,GAAG,GAA7B;AACA,cAAMmC,YAAY,GAAGnC,KAAK,GAAG,GAA7B;AACA,cAAMoC,SAAS,GAAGF,YAAlB;AAEAxC,QAAAA,GAAG,CAAC2C,WAAJ,GAAkB,KAAKd,KAAvB;AACA7B,QAAAA,GAAG,CAAC0C,SAAJ,GAAgBpC,KAAK,GAAG,GAAxB;AACAN,QAAAA,GAAG,CAAC4C,OAAJ,GAAc,OAAd;AACA5C,QAAAA,GAAG,CAAC6C,QAAJ,GAAe,OAAf;AACA7C,QAAAA,GAAG,CAAC8C,SAAJ;AAEA,aAAKb,gBAAL,CAAsBc,OAAtB,CAA8B,CAACC,eAAD,EAAkBC,KAAlB,KAA4B;AACxD,gBAAMC,QAAQ,GAAG5B,kBAAkB,CAAC0B,eAAD,CAAnC;;AACA,cAAIC,KAAK,KAAK,CAAd,EAAiB;AACfjD,YAAAA,GAAG,CAACmD,MAAJ,CAAWD,QAAQ,CAAC,CAAD,CAAnB,EAAwBA,QAAQ,CAAC,CAAD,CAAhC;AACD,WAFD,MAEO;AACLlD,YAAAA,GAAG,CAACoD,MAAJ,CAAWF,QAAQ,CAAC,CAAD,CAAnB,EAAwBA,QAAQ,CAAC,CAAD,CAAhC;AACAlD,YAAAA,GAAG,CAACqD,MAAJ;AACD;AACF,SARD;AASD,OArCI;AAsCLd,MAAAA,SAAS,EAAE,YAAY;AACrB,YAAI,KAAKP,WAAT,EAAsB;AACpBhC,UAAAA,GAAG,CAACkB,SAAJ,GAAgB,KAAKW,KAArB;AACA,eAAKE,cAAL,CAAoBgB,OAApB,CAA4BG,QAAQ,IAAI;AACtCA,YAAAA,QAAQ,GAAG5B,kBAAkB,CAAC4B,QAAD,CAA7B;AACAlD,YAAAA,GAAG,CAAC8C,SAAJ;AACA9C,YAAAA,GAAG,CAACsD,GAAJ,CAAQJ,QAAQ,CAAC,CAAD,CAAhB,EAAqBA,QAAQ,CAAC,CAAD,CAA7B,EAAkC5C,KAAK,GAAG,GAA1C,EAA+C,CAA/C,EAAkD,IAAImB,IAAI,CAAC8B,EAA3D;AACAvD,YAAAA,GAAG,CAACwD,IAAJ;AACD,WALD;AAMD;AACF,OAhDI;AAiDLpB,MAAAA,QAAQ,EAAE,YAAY;AACpB,aAAKH,gBAAL,CAAsBwB,GAAtB;AACA,aAAKxB,gBAAL,CAAsByB,OAAtB,CAA8B,KAAKC,gBAAL,EAA9B;AACD,OApDI;AAqDLA,MAAAA,gBAAgB,EAAE,UAAU7B,SAAS,GAAG,KAAKA,SAA3B,EAAsC;AACtD,cAAM8B,YAAY,GAAG,KAAK3B,gBAAL,CAAsB,CAAtB,CAArB;AACA,YAAI4B,UAAU,GAAG,EAAjB;;AACA,gBAAQ/B,SAAR;AACE,eAAK,OAAL;AACE+B,YAAAA,UAAU,CAAC,CAAD,CAAV,GAAgBD,YAAY,CAAC,CAAD,CAA5B;AACAC,YAAAA,UAAU,CAAC,CAAD,CAAV,GAAgBD,YAAY,CAAC,CAAD,CAAZ,GAAkB,CAAlC;AACA;;AACF,eAAK,MAAL;AACEC,YAAAA,UAAU,CAAC,CAAD,CAAV,GAAgBD,YAAY,CAAC,CAAD,CAAZ,GAAkB,CAAlC;AACAC,YAAAA,UAAU,CAAC,CAAD,CAAV,GAAgBD,YAAY,CAAC,CAAD,CAA5B;AACA;;AACF,eAAK,OAAL;AACEC,YAAAA,UAAU,CAAC,CAAD,CAAV,GAAgBD,YAAY,CAAC,CAAD,CAA5B;AACAC,YAAAA,UAAU,CAAC,CAAD,CAAV,GAAgBD,YAAY,CAAC,CAAD,CAAZ,GAAkB,CAAlC;AACA;;AACF,eAAK,MAAL;AACEC,YAAAA,UAAU,CAAC,CAAD,CAAV,GAAgBD,YAAY,CAAC,CAAD,CAAZ,GAAkB,CAAlC;AACAC,YAAAA,UAAU,CAAC,CAAD,CAAV,GAAgBD,YAAY,CAAC,CAAD,CAA5B;AACA;;AACF;AACEhD,YAAAA,OAAO,CAACkD,KAAR,CACE,8DACEhC,SAFJ;AAlBJ;;AAuBA,eAAO+B,UAAP;AACD,OAhFI;AAiFL1B,MAAAA,cAAc,EAAE,YAAY;AAC1B,cAAM4B,YAAY,GAAG,KAAKJ,gBAAL,EAArB;AACA,cAAMK,oBAAoB,GAAG,CAAC,GAAG,KAAK/B,gBAAT,CAA7B;AACA+B,QAAAA,oBAAoB,CAACP,GAArB;AACA,cAAMQ,eAAe,GAAGD,oBAAoB,CAACE,IAArB,CACtBhB,QAAQ,IACNA,QAAQ,CAAC,CAAD,CAAR,KAAgBa,YAAY,CAAC,CAAD,CAA5B,IAAmCb,QAAQ,CAAC,CAAD,CAAR,KAAgBa,YAAY,CAAC,CAAD,CAF3C,CAAxB;AAIA,cAAMI,eAAe,GACnBJ,YAAY,CAAC,CAAD,CAAZ,GAAkB,CAAlB,IACAA,YAAY,CAAC,CAAD,CAAZ,GAAkB5D,UAAU,GAAG,CAD/B,IAEA4D,YAAY,CAAC,CAAD,CAAZ,GAAkB,CAFlB,IAGAA,YAAY,CAAC,CAAD,CAAZ,GAAkB5D,UAAU,GAAG,CAJjC;AAKA,cAAMiE,gBAAgB,GACpBL,YAAY,CAAC,CAAD,CAAZ,KAAoBM,KAAK,CAACnB,QAAN,CAAe,CAAf,CAApB,IACAa,YAAY,CAAC,CAAD,CAAZ,KAAoBM,KAAK,CAACnB,QAAN,CAAe,CAAf,CAFtB;;AAIA,YAAIe,eAAe,IAAIE,eAAvB,EAAwC;AACtCG,UAAAA,QAAQ,GAAG,IAAX;AACAC,UAAAA,QAAQ;AACT,SAHD,MAGO,IAAIH,gBAAJ,EAAsB;AAC3B,eAAKI,cAAL;AACD;AACF,OAxGI;AAyGLA,MAAAA,cAAc,EAAE,YAAY;AAC1B,aAAKzC,cAAL,CAAoB0C,IAApB,CAAyBJ,KAAK,CAACnB,QAA/B;AACA,aAAKlB,WAAL,GAAmB,IAAnB;AACAqC,QAAAA,KAAK,CAACK,WAAN;AACD,OA7GI;AA8GLC,MAAAA,mBAAmB,EAAE,UAAU7C,SAAV,EAAqB;AACxC,cAAMiC,YAAY,GAAG,KAAKJ,gBAAL,CAAsB7B,SAAtB,CAArB;AACA,cAAM8C,YAAY,GAAG,CAAC,KAAK3C,gBAAL,CAAsBiC,IAAtB,CACpBhB,QAAQ,IACNA,QAAQ,CAAC,CAAD,CAAR,KAAgBa,YAAY,CAAC,CAAD,CAA5B,IAAmCb,QAAQ,CAAC,CAAD,CAAR,KAAgBa,YAAY,CAAC,CAAD,CAF7C,CAAtB;;AAIA,YAAIa,YAAJ,EAAkB;AAChB,eAAK9C,SAAL,GAAiBA,SAAjB;AACD;AACF,OAvHI;AAwHLO,MAAAA,eAAe,EAAE,YAAY;AAC3B,YAAI,KAAKL,WAAT,EAAsB;AACpB,gBAAM6C,aAAa,GAAG,CAAC,GAAG,KAAK9C,cAAT,CAAtB;AACA8C,UAAAA,aAAa,CAAC9B,OAAd,CAAsBG,QAAQ,IAAI;AAChC,kBAAM4B,YAAY,GAChB,KAAK7C,gBAAL,CAAsB,KAAKA,gBAAL,CAAsB8C,MAAtB,GAA+B,CAArD,CADF;;AAEA,gBACE7B,QAAQ,CAAC,CAAD,CAAR,KAAgB4B,YAAY,CAAC,CAAD,CAA5B,IACA5B,QAAQ,CAAC,CAAD,CAAR,KAAgB4B,YAAY,CAAC,CAAD,CAF9B,EAGE;AACA,mBAAK7C,gBAAL,CAAsBwC,IAAtB,CAA2BvB,QAA3B;AACA,mBAAKnB,cAAL,CAAoBiD,KAApB;;AACA,kBAAI,KAAKjD,cAAL,CAAoBgD,MAApB,KAA+B,CAAnC,EAAsC;AACpC,qBAAK/C,WAAL,GAAmB,KAAnB;AACD;AACF;AACF,WAbD;AAcD;AACF;AA1II,KAAP;AA4ID;;AACD,WAASiD,WAAT,CAAqBpD,KAAK,GAAG,SAA7B,EAAwC;AACtC,UAAMqD,QAAQ,GAAG;AACfrD,MAAAA,KAAK,EAAEA,KADQ;AAEfqB,MAAAA,QAAQ,EAAE,CAAC,CAAD,EAAI,CAAJ,CAFK;AAGfiC,MAAAA,iBAAiB,EAAE,YAAY;AAC7B,cAAMC,aAAa,GAAG,CAACC,IAAI,CAAC1B,gBAAL,EAAD,EAA0B2B,MAA1B,CACpBD,IAAI,CAACpD,gBADe,CAAtB;AAGA,cAAMsD,OAAO,GAAG9D,IAAI,CAACC,KAAL,CAAWD,IAAI,CAAC+D,MAAL,KAAgBrF,UAA3B,CAAhB;AACA,cAAMsF,OAAO,GAAGhE,IAAI,CAACC,KAAL,CAAWD,IAAI,CAAC+D,MAAL,KAAgBrF,UAA3B,CAAhB;;AACA,YAAIiF,aAAa,CAACL,MAAd,GAAuB,CAAvB,KAA6B5E,UAAU,IAAI,CAA/C,EAAkD;AAChDoE,UAAAA,QAAQ,CAAC,UAAD,CAAR;AACD,SAFD,MAEO,IACLa,aAAa,CAAClB,IAAd,CACEhB,QAAQ,IAAIA,QAAQ,CAAC,CAAD,CAAR,KAAgBqC,OAAhB,IAA2BrC,QAAQ,CAAC,CAAD,CAAR,KAAgBuC,OADzD,CADK,EAIL;AACA,eAAKN,iBAAL;AACD,SANM,MAMA;AACL,eAAKjC,QAAL,GAAgB,CAACqC,OAAD,EAAUE,OAAV,CAAhB;AACD;AACF,OApBc;AAqBfC,MAAAA,SAAS,EAAE,YAAY;AACrB,cAAMxC,QAAQ,GAAG5B,kBAAkB,CAAC,KAAK4B,QAAN,CAAnC;AAEAlD,QAAAA,GAAG,CAACkB,SAAJ,GAAgB,KAAKW,KAArB;AACA7B,QAAAA,GAAG,CAAC8C,SAAJ;AACA9C,QAAAA,GAAG,CAACsD,GAAJ,CAAQJ,QAAQ,CAAC,CAAD,CAAhB,EAAqBA,QAAQ,CAAC,CAAD,CAA7B,EAAkC5C,KAAK,GAAG,GAA1C,EAA+C,CAA/C,EAAkD,IAAImB,IAAI,CAAC8B,EAA3D;AACAvD,QAAAA,GAAG,CAACwD,IAAJ;AACD,OA5Bc;AA6BfkB,MAAAA,WAAW,EAAE,YAAY;AACvBL,QAAAA,KAAK,GAAGY,WAAW,EAAnB;AACD;AA/Bc,KAAjB;AAiCAC,IAAAA,QAAQ,CAACC,iBAAT;AACA,WAAOD,QAAP;AACD;;AACD,WAASX,QAAT,CAAkBoB,OAAO,GAAG,WAA5B,EAAyC;AACvCrB,IAAAA,QAAQ,GAAG,IAAX;AACAe,IAAAA,IAAI,GAAGzD,UAAU,EAAjB;AACAyC,IAAAA,KAAK,GAAGY,WAAW,EAAnB;AACAhE,IAAAA,cAAc;AACd2E,IAAAA,KAAK,CAACD,OAAD,CAAL;AACD;;AAED,MAAIrB,QAAQ,GAAG,IAAf;AACA,QAAMuB,GAAG,GAAGjG,MAAM,CAACiG,GAAnB;AACA,QAAMC,WAAW,GAAG,OAAOD,GAA3B;AACA,MAAIE,GAAJ,EAASC,IAAT,EAAeC,KAAf;;AAEA,WAASC,SAAT,CAAmBL,GAAnB,EAAwB;AACtBG,IAAAA,IAAI,GAAGvF,MAAM,CAAC0F,WAAP,CAAmBJ,GAAnB,EAAP;AACAK,IAAAA,qBAAqB,CAAClE,MAAD,CAArB;AACD;;AAED,WAASA,MAAT,GAAkB;AAChB6D,IAAAA,GAAG,GAAGtF,MAAM,CAAC0F,WAAP,CAAmBJ,GAAnB,EAAN;AACAE,IAAAA,KAAK,GAAGF,GAAG,GAAGC,IAAd;;AAEA,QAAIC,KAAK,GAAGH,WAAZ,EAAyB;AACvBE,MAAAA,IAAI,GAAGD,GAAG,GAAIE,KAAK,GAAGH,WAAtB;AACA7E,MAAAA,cAAc;AACdoE,MAAAA,IAAI,CAACnD,MAAL;AACAmC,MAAAA,KAAK,CAACqB,SAAN;AACD;;AACD,KAACpB,QAAD,IAAa8B,qBAAqB,CAAClE,MAAD,CAAlC;AACD;;AAED,WAASmE,IAAT,GAAgB;AACdvF,IAAAA,YAAY;AACZG,IAAAA,cAAc;AACdiF,IAAAA,SAAS;AACV;;AAED,MAAIb,IAAI,GAAGzD,UAAU,EAArB;AACA,MAAIyC,KAAK,GAAGY,WAAW,EAAvB;AAEAxE,EAAAA,MAAM,CAAC6F,gBAAP,CAAwB,MAAxB,EAAgCD,IAAhC;AAEAE,EAAAA,QAAQ,CAACD,gBAAT,CAA0B,SAA1B,EAAqCE,KAAK,IAAI;AAC5C,UAAMC,GAAG,GAAGD,KAAK,CAACC,GAAN,CAAUC,iBAAV,EAAZ;;AACA,YAAQD,GAAR;AACE,WAAK,GAAL;AACEnC,QAAAA,QAAQ,IAAIpC,MAAM,EAAlB;AACA;;AACF,WAAK,GAAL;AACEoC,QAAAA,QAAQ,GAAG,CAACA,QAAZ;AACA,SAACA,QAAD,IAAa8B,qBAAqB,CAAClE,MAAD,CAAlC;AACA;;AACF,WAAK,GAAL;AACA,WAAK,SAAL;AACEmD,QAAAA,IAAI,CAACV,mBAAL,CAAyB,OAAzB;AACA;;AACF,WAAK,GAAL;AACA,WAAK,WAAL;AACEU,QAAAA,IAAI,CAACV,mBAAL,CAAyB,OAAzB;AACA;;AACF,WAAK,GAAL;AACA,WAAK,WAAL;AACEU,QAAAA,IAAI,CAACV,mBAAL,CAAyB,MAAzB;AACA;;AACF,WAAK,GAAL;AACA,WAAK,YAAL;AACEU,QAAAA,IAAI,CAACV,mBAAL,CAAyB,MAAzB;AACA;;AACF;AACE;AAzBJ;AA2BD,GA7BD;AA8BD","sourcesContent":["import config from \"./config\";\n\nexport default function runGame(canvas, gameSize = config.gameSize) {\n  const ctx = canvas.getContext(\"2d\");\n  const responsiveSize = config.responsiveSize;\n  const numOfCells = config.numOfCells;\n  const sideLength = responsiveSize ? findScreenSize() : config.gameSize;\n  const scale = sideLength / numOfCells;\n  const backgroundColor = config.backgroundColor;\n\n  function findScreenSize() {\n    const size =\n      window.innerWidth < window.innerHeight\n        ? window.innerWidth\n        : window.innerHeight;\n    console.log(window.innerWidth, window.innerHeight, size);\n    return size * 0.9;\n  }\n\n  function resizeCanvas() {\n    canvas.height = sideLength;\n    canvas.width = sideLength;\n  }\n  function drawBackground() {\n    ctx.fillStyle = backgroundColor;\n    ctx.fillRect(0, 0, sideLength, sideLength);\n    ctx.fillStyle = \"rgba(255,255,255, 0.2)\";\n\n    for (let i = 0; i < numOfCells; i += 2) {\n      for (let j = 0; j < numOfCells; j += 2) {\n        ctx.fillRect(i * scale, j * scale, scale, scale);\n        ctx.fillRect((i + 1) * scale, (j + 1) * scale, scale, scale);\n      }\n    }\n  }\n  function cellPosToCanvasPos(positionArray) {\n    const x = Math.floor(positionArray[0] * scale + scale * 0.5);\n    const y = Math.floor(positionArray[1] * scale + scale * 0.5);\n    return [x, y];\n  }\n  function createSlug(\n    color = \"salmon\",\n    x = Math.floor(numOfCells / 2),\n    y = Math.floor(numOfCells / 2)\n  ) {\n    return {\n      color: color,\n      direction: \"north\",\n      bellyPositions: [],\n      isDigesting: false,\n      segmentPositions: [\n        [x, y],\n        [x, y + 1],\n        [x, y + 2]\n      ],\n      update: function () {\n        this.checkCollision();\n        this.moveSlug();\n        this.handleDigestion();\n        this.drawSlug();\n        this.drawBelly();\n      },\n      drawSlug: function () {\n        const maxLineWidth = scale * 0.8;\n        const minLineWidth = scale * 0.2;\n        const lineWidth = maxLineWidth;\n\n        ctx.strokeStyle = this.color;\n        ctx.lineWidth = scale * 0.8;\n        ctx.lineCap = \"round\";\n        ctx.lineJoin = \"round\";\n        ctx.beginPath();\n\n        this.segmentPositions.forEach((segmentPosition, index) => {\n          const position = cellPosToCanvasPos(segmentPosition);\n          if (index === 0) {\n            ctx.moveTo(position[0], position[1]);\n          } else {\n            ctx.lineTo(position[0], position[1]);\n            ctx.stroke();\n          }\n        });\n      },\n      drawBelly: function () {\n        if (this.isDigesting) {\n          ctx.fillStyle = this.color;\n          this.bellyPositions.forEach(position => {\n            position = cellPosToCanvasPos(position);\n            ctx.beginPath();\n            ctx.arc(position[0], position[1], scale * 0.5, 0, 2 * Math.PI);\n            ctx.fill();\n          });\n        }\n      },\n      moveSlug: function () {\n        this.segmentPositions.pop();\n        this.segmentPositions.unshift(this.findNextPosition());\n      },\n      findNextPosition: function (direction = this.direction) {\n        const firstSegment = this.segmentPositions[0];\n        let newSegment = [];\n        switch (direction) {\n          case \"north\":\n            newSegment[0] = firstSegment[0];\n            newSegment[1] = firstSegment[1] - 1;\n            break;\n          case \"west\":\n            newSegment[0] = firstSegment[0] - 1;\n            newSegment[1] = firstSegment[1];\n            break;\n          case \"south\":\n            newSegment[0] = firstSegment[0];\n            newSegment[1] = firstSegment[1] + 1;\n            break;\n          case \"east\":\n            newSegment[0] = firstSegment[0] + 1;\n            newSegment[1] = firstSegment[1];\n            break;\n          default:\n            console.error(\n              \"ERROR: expected 'north' 'south' 'east' or 'west' but got \" +\n                direction\n            );\n        }\n        return newSegment;\n      },\n      checkCollision: function () {\n        const nextPosition = this.findNextPosition();\n        const nextSegmentPositions = [...this.segmentPositions];\n        nextSegmentPositions.pop();\n        const collideWithSelf = nextSegmentPositions.some(\n          position =>\n            position[0] === nextPosition[0] && position[1] === nextPosition[1]\n        );\n        const collideWithEdge =\n          nextPosition[0] < 0 ||\n          nextPosition[0] > numOfCells - 1 ||\n          nextPosition[1] < 0 ||\n          nextPosition[1] > numOfCells - 1;\n        const collideWithSnack =\n          nextPosition[0] === snack.position[0] &&\n          nextPosition[1] === snack.position[1];\n\n        if (collideWithSelf || collideWithEdge) {\n          isPaused = true;\n          gameOver();\n        } else if (collideWithSnack) {\n          this.handleEatSnack();\n        }\n      },\n      handleEatSnack: function () {\n        this.bellyPositions.push(snack.position);\n        this.isDigesting = true;\n        snack.handleEaten();\n      },\n      handleMovementInput: function (direction) {\n        const nextPosition = this.findNextPosition(direction);\n        const canMoveThere = !this.segmentPositions.some(\n          position =>\n            position[0] === nextPosition[0] && position[1] === nextPosition[1]\n        );\n        if (canMoveThere) {\n          this.direction = direction;\n        }\n      },\n      handleDigestion: function () {\n        if (this.isDigesting) {\n          const tempPositions = [...this.bellyPositions];\n          tempPositions.forEach(position => {\n            const finalSegment =\n              this.segmentPositions[this.segmentPositions.length - 1];\n            if (\n              position[0] === finalSegment[0] &&\n              position[1] === finalSegment[1]\n            ) {\n              this.segmentPositions.push(position);\n              this.bellyPositions.shift();\n              if (this.bellyPositions.length === 0) {\n                this.isDigesting = false;\n              }\n            }\n          });\n        }\n      }\n    };\n  }\n  function createSnack(color = \"#66b8ff\") {\n    const newSnack = {\n      color: color,\n      position: [0, 0],\n      randomizePosition: function () {\n        const slugPositions = [slug.findNextPosition()].concat(\n          slug.segmentPositions\n        );\n        const randomX = Math.floor(Math.random() * numOfCells);\n        const randomY = Math.floor(Math.random() * numOfCells);\n        if (slugPositions.length - 2 === numOfCells ** 2) {\n          gameOver(\"You WIN!\");\n        } else if (\n          slugPositions.some(\n            position => position[0] === randomX && position[1] === randomY\n          )\n        ) {\n          this.randomizePosition();\n        } else {\n          this.position = [randomX, randomY];\n        }\n      },\n      drawSnack: function () {\n        const position = cellPosToCanvasPos(this.position);\n\n        ctx.fillStyle = this.color;\n        ctx.beginPath();\n        ctx.arc(position[0], position[1], scale * 0.3, 0, 2 * Math.PI);\n        ctx.fill();\n      },\n      handleEaten: function () {\n        snack = createSnack();\n      }\n    };\n    newSnack.randomizePosition();\n    return newSnack;\n  }\n  function gameOver(message = \"Game Over\") {\n    isPaused = true;\n    slug = createSlug();\n    snack = createSnack();\n    drawBackground();\n    alert(message);\n  }\n\n  let isPaused = true;\n  const fps = config.fps;\n  const fpsInterval = 1000 / fps;\n  let now, then, delta;\n\n  function startGame(fps) {\n    then = window.performance.now();\n    requestAnimationFrame(update);\n  }\n\n  function update() {\n    now = window.performance.now();\n    delta = now - then;\n\n    if (delta > fpsInterval) {\n      then = now - (delta % fpsInterval);\n      drawBackground();\n      slug.update();\n      snack.drawSnack();\n    }\n    !isPaused && requestAnimationFrame(update);\n  }\n\n  function init() {\n    resizeCanvas();\n    drawBackground();\n    startGame();\n  }\n\n  let slug = createSlug();\n  let snack = createSnack();\n\n  window.addEventListener(\"load\", init);\n\n  document.addEventListener(\"keydown\", event => {\n    const key = event.key.toLocaleLowerCase();\n    switch (key) {\n      case \" \":\n        isPaused && update();\n        break;\n      case \"p\":\n        isPaused = !isPaused;\n        !isPaused && requestAnimationFrame(update);\n        break;\n      case \"w\":\n      case \"arrowup\":\n        slug.handleMovementInput(\"north\");\n        break;\n      case \"s\":\n      case \"arrowdown\":\n        slug.handleMovementInput(\"south\");\n        break;\n      case \"a\":\n      case \"arrowleft\":\n        slug.handleMovementInput(\"west\");\n        break;\n      case \"d\":\n      case \"arrowright\":\n        slug.handleMovementInput(\"east\");\n        break;\n      default:\n        break;\n    }\n  });\n}\n"]},"metadata":{},"sourceType":"module"}