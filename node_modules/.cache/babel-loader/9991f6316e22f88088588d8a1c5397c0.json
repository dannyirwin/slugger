{"ast":null,"code":"import config from \"./config\";\nexport default function runGame(canvas) {\n  const ctx = canvas.getContext(\"2d\");\n  const numOfCells = 16;\n  const sideLength = 600;\n  const scale = sideLength / numOfCells;\n  const backgroundColor = \"#c3faa2\";\n\n  function resizeCanvas() {\n    canvas.height = sideLength;\n    canvas.width = sideLength;\n  }\n\n  function drawBackground() {\n    ctx.fillStyle = backgroundColor;\n    ctx.fillRect(0, 0, sideLength, sideLength);\n    ctx.fillStyle = \"rgba(255,255,255, 0.2)\";\n\n    for (let i = 0; i < numOfCells; i += 2) {\n      for (let j = 0; j < numOfCells; j += 2) {\n        ctx.fillRect(i * scale, j * scale, scale, scale);\n        ctx.fillRect((i + 1) * scale, (j + 1) * scale, scale, scale);\n      }\n    }\n  }\n\n  function cellPosToCanvasPos(positionArray) {\n    const x = Math.floor(positionArray[0] * scale + scale * 0.5);\n    const y = Math.floor(positionArray[1] * scale + scale * 0.5);\n    return [x, y];\n  }\n\n  function createSlug(color = \"salmon\", x = Math.floor(numOfCells / 2), y = Math.floor(numOfCells / 2)) {\n    return {\n      color: color,\n      direction: \"north\",\n      bellyPositions: [],\n      //new\n      isDigesting: false,\n      //new\n      segmentPositions: [[x, y], [x, y + 1], [x, y + 2]],\n      update: function () {\n        this.checkCollision();\n        this.moveSlug();\n        this.handleDigestion(); //<<NEw\n\n        this.drawSlug();\n        this.drawBelly(); //<new\n      },\n      drawSlug: function () {\n        ctx.strokeStyle = this.color;\n        ctx.lineWidth = scale * 0.8;\n        ctx.lineCap = \"round\";\n        ctx.lineJoin = \"round\";\n        ctx.beginPath();\n        this.segmentPositions.forEach((segmentPosition, index) => {\n          const position = cellPosToCanvasPos(segmentPosition);\n\n          if (index === 0) {\n            ctx.moveTo(position[0], position[1]);\n          } else {\n            ctx.lineTo(position[0], position[1]);\n          }\n        });\n        ctx.stroke();\n      },\n      drawBelly: function () {\n        //<<new\n        if (this.isDigesting) {\n          ctx.fillStyle = this.color;\n          this.bellyPositions.forEach(position => {\n            position = cellPosToCanvasPos(position);\n            ctx.beginPath();\n            ctx.arc(position[0], position[1], scale * 0.5, 0, 2 * Math.PI);\n            ctx.fill();\n          });\n        }\n      },\n      moveSlug: function () {\n        this.segmentPositions.pop();\n        this.segmentPositions.unshift(this.findNextPosition());\n      },\n      findNextPosition: function (direction = this.direction) {\n        const firstSegment = this.segmentPositions[0];\n        let newSegment = [];\n\n        switch (direction) {\n          case \"north\":\n            newSegment[0] = firstSegment[0];\n            newSegment[1] = firstSegment[1] - 1;\n            break;\n\n          case \"west\":\n            newSegment[0] = firstSegment[0] - 1;\n            newSegment[1] = firstSegment[1];\n            break;\n\n          case \"south\":\n            newSegment[0] = firstSegment[0];\n            newSegment[1] = firstSegment[1] + 1;\n            break;\n\n          case \"east\":\n            newSegment[0] = firstSegment[0] + 1;\n            newSegment[1] = firstSegment[1];\n            break;\n        }\n\n        return newSegment;\n      },\n      checkCollision: function () {\n        const nextPosition = this.findNextPosition();\n        const nextSegmentPositions = [...this.segmentPositions];\n        nextSegmentPositions.pop();\n        const collideWithSelf = nextSegmentPositions.some(position => position[0] == nextPosition[0] && position[1] == nextPosition[1]);\n        const collideWithEdge = nextPosition[0] < 0 || nextPosition[0] > numOfCells - 1 || nextPosition[1] < 0 || nextPosition[1] > numOfCells - 1;\n        const collideWithSnack = nextPosition[0] == snack.position[0] && nextPosition[1] == snack.position[1]; //<PART 5\n\n        if (collideWithSelf || collideWithEdge) {\n          isPaused = true;\n          gameOver();\n        } else if (collideWithSnack) {\n          //<PART 5\n          this.handleEatSnack();\n        }\n      },\n      handleEatSnack: function () {\n        //NEW\n        this.bellyPositions.push(snack.position);\n        this.isDigesting = true;\n        snack.handleEaten();\n      },\n      handleMovementInput: function (direction) {\n        const nextPosition = this.findNextPosition(direction);\n        const canMoveThere = !this.segmentPositions.some(position => position[0] == nextPosition[0] && position[1] == nextPosition[1]);\n\n        if (canMoveThere) {\n          this.direction = direction;\n        }\n      },\n      handleDigestion: function () {\n        //<<New\n        if (this.isDigesting) {\n          const tempPositions = [...this.bellyPositions];\n          tempPositions.forEach(position => {\n            const finalSegment = this.segmentPositions[this.segmentPositions.length - 1];\n\n            if (position[0] === finalSegment[0] && position[1] === finalSegment[1]) {\n              this.segmentPositions.push(position);\n              this.bellyPositions.shift();\n\n              if (this.bellyPositions.length == 0) {\n                this.isDigesting = false;\n              }\n            }\n          });\n        }\n      }\n    };\n  }\n\n  function createSnack(color = \"#66b8ff\") {\n    const newSnack = {\n      color: color,\n      position: [0, 0],\n      randomizePosition: function () {\n        const slugPositions = [slug.findNextPosition()].concat(slug.segmentPositions);\n        const randomX = Math.floor(Math.random() * numOfCells);\n        const randomY = Math.floor(Math.random() * numOfCells);\n\n        if (slugPositions.length - 2 == numOfCells ** 2) {\n          gameOver(\"You WIN!\");\n        } else if (slugPositions.some(position => position[0] === randomX && position[1] === randomY)) {\n          this.randomizePosition();\n        } else {\n          this.position = [randomX, randomY];\n        }\n      },\n      drawSnack: function () {\n        const position = cellPosToCanvasPos(this.position);\n        ctx.fillStyle = this.color;\n        ctx.beginPath();\n        ctx.arc(position[0], position[1], scale * 0.3, 0, 2 * Math.PI);\n        ctx.fill();\n      },\n      handleEaten: function () {\n        snack = createSnack();\n      }\n    };\n    newSnack.randomizePosition();\n    return newSnack;\n  }\n\n  function gameOver(message = \"Game Over\") {\n    isPaused = true;\n    slug = createSlug();\n    snack = createSnack();\n    drawBackground();\n    alert(message);\n  }\n\n  let isPaused = true;\n  const fps = 5;\n  const fpsInterval = 1000 / fps;\n  let now, then, delta;\n\n  function startGame(fps) {\n    then = window.performance.now();\n    requestAnimationFrame(update);\n  }\n\n  function update() {\n    now = window.performance.now();\n    delta = now - then;\n\n    if (delta > fpsInterval) {\n      then = now - delta % fpsInterval;\n      drawBackground();\n      slug.update();\n      snack.drawSnack();\n    }\n\n    !isPaused && requestAnimationFrame(update);\n  }\n\n  function init() {\n    resizeCanvas();\n    drawBackground();\n    startGame();\n  }\n\n  let slug = createSlug();\n  let snack = createSnack();\n  window.addEventListener(\"load\", init);\n  document.addEventListener(\"keydown\", event => {\n    const key = event.key.toLocaleLowerCase();\n\n    switch (key) {\n      case \" \":\n        isPaused && update();\n        break;\n\n      case \"p\":\n        isPaused = !isPaused;\n        !isPaused && requestAnimationFrame(update);\n        break;\n\n      case \"w\":\n      case \"arrowup\":\n        slug.handleMovementInput(\"north\");\n        break;\n\n      case \"s\":\n      case \"arrowdown\":\n        slug.handleMovementInput(\"south\");\n        break;\n\n      case \"a\":\n      case \"arrowleft\":\n        slug.handleMovementInput(\"west\");\n        break;\n\n      case \"d\":\n      case \"arrowright\":\n        slug.handleMovementInput(\"east\");\n        break;\n    }\n  });\n}","map":{"version":3,"sources":["/Users/dirwin/Development/slugger/src/slugger.js"],"names":["config","runGame","canvas","ctx","getContext","numOfCells","sideLength","scale","backgroundColor","resizeCanvas","height","width","drawBackground","fillStyle","fillRect","i","j","cellPosToCanvasPos","positionArray","x","Math","floor","y","createSlug","color","direction","bellyPositions","isDigesting","segmentPositions","update","checkCollision","moveSlug","handleDigestion","drawSlug","drawBelly","strokeStyle","lineWidth","lineCap","lineJoin","beginPath","forEach","segmentPosition","index","position","moveTo","lineTo","stroke","arc","PI","fill","pop","unshift","findNextPosition","firstSegment","newSegment","nextPosition","nextSegmentPositions","collideWithSelf","some","collideWithEdge","collideWithSnack","snack","isPaused","gameOver","handleEatSnack","push","handleEaten","handleMovementInput","canMoveThere","tempPositions","finalSegment","length","shift","createSnack","newSnack","randomizePosition","slugPositions","slug","concat","randomX","random","randomY","drawSnack","message","alert","fps","fpsInterval","now","then","delta","startGame","window","performance","requestAnimationFrame","init","addEventListener","document","event","key","toLocaleLowerCase"],"mappings":"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","sourcesContent":["import config from \"./config\";\n\nexport default function runGame(canvas) {\n  const ctx = canvas.getContext(\"2d\");\n  const numOfCells = 16;\n  const sideLength = 600;\n  const scale = sideLength / numOfCells;\n  const backgroundColor = \"#c3faa2\";\n\n  function resizeCanvas() {\n    canvas.height = sideLength;\n    canvas.width = sideLength;\n  }\n  function drawBackground() {\n    ctx.fillStyle = backgroundColor;\n    ctx.fillRect(0, 0, sideLength, sideLength);\n    ctx.fillStyle = \"rgba(255,255,255, 0.2)\";\n\n    for (let i = 0; i < numOfCells; i += 2) {\n      for (let j = 0; j < numOfCells; j += 2) {\n        ctx.fillRect(i * scale, j * scale, scale, scale);\n        ctx.fillRect((i + 1) * scale, (j + 1) * scale, scale, scale);\n      }\n    }\n  }\n  function cellPosToCanvasPos(positionArray) {\n    const x = Math.floor(positionArray[0] * scale + scale * 0.5);\n    const y = Math.floor(positionArray[1] * scale + scale * 0.5);\n    return [x, y];\n  }\n  function createSlug(\n    color = \"salmon\",\n    x = Math.floor(numOfCells / 2),\n    y = Math.floor(numOfCells / 2)\n  ) {\n    return {\n      color: color,\n      direction: \"north\",\n      bellyPositions: [], //new\n      isDigesting: false, //new\n      segmentPositions: [\n        [x, y],\n        [x, y + 1],\n        [x, y + 2]\n      ],\n      update: function () {\n        this.checkCollision();\n        this.moveSlug();\n        this.handleDigestion(); //<<NEw\n        this.drawSlug();\n        this.drawBelly(); //<new\n      },\n      drawSlug: function () {\n        ctx.strokeStyle = this.color;\n        ctx.lineWidth = scale * 0.8;\n        ctx.lineCap = \"round\";\n        ctx.lineJoin = \"round\";\n        ctx.beginPath();\n        this.segmentPositions.forEach((segmentPosition, index) => {\n          const position = cellPosToCanvasPos(segmentPosition);\n          if (index === 0) {\n            ctx.moveTo(position[0], position[1]);\n          } else {\n            ctx.lineTo(position[0], position[1]);\n          }\n        });\n        ctx.stroke();\n      },\n      drawBelly: function () {\n        //<<new\n        if (this.isDigesting) {\n          ctx.fillStyle = this.color;\n          this.bellyPositions.forEach(position => {\n            position = cellPosToCanvasPos(position);\n            ctx.beginPath();\n            ctx.arc(position[0], position[1], scale * 0.5, 0, 2 * Math.PI);\n            ctx.fill();\n          });\n        }\n      },\n      moveSlug: function () {\n        this.segmentPositions.pop();\n        this.segmentPositions.unshift(this.findNextPosition());\n      },\n      findNextPosition: function (direction = this.direction) {\n        const firstSegment = this.segmentPositions[0];\n        let newSegment = [];\n        switch (direction) {\n          case \"north\":\n            newSegment[0] = firstSegment[0];\n            newSegment[1] = firstSegment[1] - 1;\n            break;\n          case \"west\":\n            newSegment[0] = firstSegment[0] - 1;\n            newSegment[1] = firstSegment[1];\n            break;\n          case \"south\":\n            newSegment[0] = firstSegment[0];\n            newSegment[1] = firstSegment[1] + 1;\n            break;\n          case \"east\":\n            newSegment[0] = firstSegment[0] + 1;\n            newSegment[1] = firstSegment[1];\n            break;\n        }\n        return newSegment;\n      },\n      checkCollision: function () {\n        const nextPosition = this.findNextPosition();\n        const nextSegmentPositions = [...this.segmentPositions];\n        nextSegmentPositions.pop();\n        const collideWithSelf = nextSegmentPositions.some(\n          position =>\n            position[0] == nextPosition[0] && position[1] == nextPosition[1]\n        );\n        const collideWithEdge =\n          nextPosition[0] < 0 ||\n          nextPosition[0] > numOfCells - 1 ||\n          nextPosition[1] < 0 ||\n          nextPosition[1] > numOfCells - 1;\n        const collideWithSnack =\n          nextPosition[0] == snack.position[0] &&\n          nextPosition[1] == snack.position[1]; //<PART 5\n\n        if (collideWithSelf || collideWithEdge) {\n          isPaused = true;\n          gameOver();\n        } else if (collideWithSnack) {\n          //<PART 5\n          this.handleEatSnack();\n        }\n      },\n      handleEatSnack: function () {\n        //NEW\n        this.bellyPositions.push(snack.position);\n        this.isDigesting = true;\n        snack.handleEaten();\n      },\n      handleMovementInput: function (direction) {\n        const nextPosition = this.findNextPosition(direction);\n        const canMoveThere = !this.segmentPositions.some(\n          position =>\n            position[0] == nextPosition[0] && position[1] == nextPosition[1]\n        );\n        if (canMoveThere) {\n          this.direction = direction;\n        }\n      },\n      handleDigestion: function () {\n        //<<New\n        if (this.isDigesting) {\n          const tempPositions = [...this.bellyPositions];\n          tempPositions.forEach(position => {\n            const finalSegment =\n              this.segmentPositions[this.segmentPositions.length - 1];\n            if (\n              position[0] === finalSegment[0] &&\n              position[1] === finalSegment[1]\n            ) {\n              this.segmentPositions.push(position);\n              this.bellyPositions.shift();\n              if (this.bellyPositions.length == 0) {\n                this.isDigesting = false;\n              }\n            }\n          });\n        }\n      }\n    };\n  }\n  function createSnack(color = \"#66b8ff\") {\n    const newSnack = {\n      color: color,\n      position: [0, 0],\n      randomizePosition: function () {\n        const slugPositions = [slug.findNextPosition()].concat(\n          slug.segmentPositions\n        );\n        const randomX = Math.floor(Math.random() * numOfCells);\n        const randomY = Math.floor(Math.random() * numOfCells);\n        if (slugPositions.length - 2 == numOfCells ** 2) {\n          gameOver(\"You WIN!\");\n        } else if (\n          slugPositions.some(\n            position => position[0] === randomX && position[1] === randomY\n          )\n        ) {\n          this.randomizePosition();\n        } else {\n          this.position = [randomX, randomY];\n        }\n      },\n      drawSnack: function () {\n        const position = cellPosToCanvasPos(this.position);\n\n        ctx.fillStyle = this.color;\n        ctx.beginPath();\n        ctx.arc(position[0], position[1], scale * 0.3, 0, 2 * Math.PI);\n        ctx.fill();\n      },\n      handleEaten: function () {\n        snack = createSnack();\n      }\n    };\n    newSnack.randomizePosition();\n    return newSnack;\n  }\n  function gameOver(message = \"Game Over\") {\n    isPaused = true;\n    slug = createSlug();\n    snack = createSnack();\n    drawBackground();\n    alert(message);\n  }\n\n  let isPaused = true;\n  const fps = 5;\n  const fpsInterval = 1000 / fps;\n  let now, then, delta;\n\n  function startGame(fps) {\n    then = window.performance.now();\n    requestAnimationFrame(update);\n  }\n\n  function update() {\n    now = window.performance.now();\n    delta = now - then;\n\n    if (delta > fpsInterval) {\n      then = now - (delta % fpsInterval);\n      drawBackground();\n      slug.update();\n      snack.drawSnack();\n    }\n    !isPaused && requestAnimationFrame(update);\n  }\n\n  function init() {\n    resizeCanvas();\n    drawBackground();\n    startGame();\n  }\n\n  let slug = createSlug();\n  let snack = createSnack();\n\n  window.addEventListener(\"load\", init);\n\n  document.addEventListener(\"keydown\", event => {\n    const key = event.key.toLocaleLowerCase();\n    switch (key) {\n      case \" \":\n        isPaused && update();\n        break;\n      case \"p\":\n        isPaused = !isPaused;\n        !isPaused && requestAnimationFrame(update);\n        break;\n      case \"w\":\n      case \"arrowup\":\n        slug.handleMovementInput(\"north\");\n        break;\n      case \"s\":\n      case \"arrowdown\":\n        slug.handleMovementInput(\"south\");\n        break;\n      case \"a\":\n      case \"arrowleft\":\n        slug.handleMovementInput(\"west\");\n        break;\n      case \"d\":\n      case \"arrowright\":\n        slug.handleMovementInput(\"east\");\n        break;\n    }\n  });\n}\n"]},"metadata":{},"sourceType":"module"}